Assignment 2
	Question 1
		När en funktion inte ska returnera ett värde använder man void. Funktionen kan vara användbar genom att göra saker genom I/O eller genom att den ändrar på en global variabel.
	Question 2
		Jag använde mig av en global variabel column som beskrev vilken column funktionen var i, och resettade värdet till 1 när den slog över till värdet på COLUMBS.
Assignment 3
	Question 1
		Jag använde en array av char:s i vilken jag sparade en 1 ifall det inte var en prime och en 0 ifall det var en prime. På detta sätt försäkrar jag mig om att array:en alltid använder sig av <n bytes, då char bara använder en byte.
	Question 2
		Huvudstegen i algoritmen är att gå igenom alla multiplar av tal. Man börjar med att säga att 2 är ett primtal, sedan markeras alla talen som är multiplar av 2 som icke-prim. Sedan markerar du 3 som prim och alla multiplar av 3 som icke-prim o.s.v.
	Question 3
		+---------------+-------+--------+
		| Programm		| 2 sek | 10 sek |
		+---------------+-------+--------+
		| Print-primes	|800000	| 5000000|
		| Sieves		|800000	| 5000000|
		| Sieves-heap 	|800000 | 5000000|
		+---------------+-------+--------+
		Anledningen till att jag har fått samma svar på alla tror jag inte beror på att metoderna för att beräkna prima är lika snabba, utan för att det som faktiskt tar tid är
		själva printandet. Tidigare gjorde jag så att jag beräknade alla prima först, sedan printade jag dem. Detta är ett bättre mått på hastighet då för dessa låga tal är det printingen som tar mest utav
		tiden. I de extratester jag gjorde såg det ut som om print-primes var klart snabbast för större tal.
