FELIX HEDENSTRÖM

Assignment 2
	Question 1
		När en funktion inte ska returnera ett värde använder man void. Funktionen kan vara användbar genom att göra saker genom I/O eller genom att den ändrar på en global variabel.
	Question 2
		Jag använde mig av en global variabel column som beskrev vilken column funktionen var i, och resettade värdet till 1 när den slog över till värdet på COLUMBS.
Assignment 3
	Question 1
		Jag använde en array av char:s i vilken jag sparade en 1 ifall det inte var en prime och en 0 ifall det var en prime. På detta sätt försäkrar jag mig om att array:en alltid använder sig av <n bytes, då char bara använder en byte.
	Question 2
		Huvudstegen i algoritmen är att gå igenom alla multiplar av tal. Man börjar med att säga att 2 är ett primtal, sedan markeras alla talen som är multiplar av 2 som icke-prim. Sedan markerar du 3 som prim och alla multiplar av 3 som icke-prim o.s.v.
	Question 3
		+---------------+-------+--------+
		| Programm		| 2 sek | 10 sek |
		+---------------+-------+--------+
		| Print-primes	|800000	| 5000000|
		| Sieves		|800000	| 5000000|
		| Sieves-heap 	|800000 | 5000000|
		+---------------+-------+--------+
		Anledningen till att jag har fått samma svar på alla tror jag inte beror på att metoderna för att beräkna prima är lika snabba, utan för att det som faktiskt tar tid är
		själva printandet. Tidigare gjorde jag så att jag beräknade alla prima först, sedan printade jag dem. Detta är ett bättre mått på hastighet då för dessa låga tal är det printingen som tar mest utav
		tiden. I de extratester jag gjorde såg det ut som om print-primes var klart snabbast för större tal.
Assignment 4
	Question 1
		Jag skriver att funktionen ska ta in pekare i signaturen void copycodes(char *text, int *lst, int *count). För texten och listan behöver jag bara skicka in dem som vanligt, då de fungerar som pekare normalt. Men för countern så behöver jag skriva &counter för att den ska ta in den som en pekare.		
	Question 2
		När man inkrementerar en pointer räknar den upp värdet som den pekar på med lika många byte som den är stor, så för char är det en byte som den inkrementerar med, för int är det 2 bytes som den inkrementerar.
	Question 3
		Skillnaden är att när man inkrementerar det som pekaren pekar på ändras inte pekaren. Inkrementerar man pekaren kommer värdet den pekar på antagligen vara annorlunda, då om man kollar på *p så pekar den på en annan plats än vad den gjorde tidigare. När jag inkrementerade counter skickade jag först in den i funktionen som en pekare med hjälp av &counter, sedan ikrementerade jag den i funktioen genom att skriva *c = *c + 1;
	Question 4
		Jag "derefrence":ar pekare i bl.a. copycodes koden där jag skriver *c = *c + 1; och *lst = *text; när jag använder värdet som pekaren pekar på. I assembly motsvarar detta  att man skriver t.ex. 
		lb	$t0,0($a0)
		vilket betyder att vi laddar värdet som $a0 pekar på.
	Question 5
		Den datorn jag använder använder little-endian då jag får svaret 0x23,0x00,0x00,0x00, vilket betyder att värdet 35, som i hex är 00000023 om man sparar det på 4 bytes. Det skrivs istället baklänges, vilket betyder att det är little endian som används. Det känns som big endian är bättre för läslighet. Jag antar att big endian hjälper med multiplikation då när vi adderar två tal går vi baklänges och flyttar upp 10 om det blir över 10 ex:
		Little-endian
		   (100)
			(10)
			175
		+	 36
		-------
			  1
			 10	
			200
		-------
			211
		I big endian behöver man då inte leta fram vilken den sista siffran i ett tal är då man redan vet att den kommer vara på första index.
Assignment 5
	Question 1 
		in ligger på minnesplats A000000C och gv ligger vid plats A000000C. 			Enligt PIC32 manualen ligger detta i RAM-minnet. Den sparas här 		eftersom det är detta RAM-minne är till för, att hålla variabler för 			användaraktiverade program.
	Question 2
		fun 	: 9D001180
		main 	: 9D0011D8
		Dessa funktioner ligger i Program Flash delen utav minnet. De är sparade i 			snabbare typer av minne än variablerna. Det som lagrats på funs plats är en 			MIPS funktion som säger addiu $sp $sp med något stort tal. 
	Question 3
		De använder en reserverad del utav minnet. Anledningen till att deras adresser 			har ligger på en mycket högre address i minnet.
	Question 4
		Adress	: A0003FEC
		Data 	: A0003FE8
		Vid detta tillfälle är värdet av det som p pekar på samma som m, d.v.s. 7.
	Question 5
		Adress	: A0003FEC
		Data 	: A0003FE8
		Pekaren pekar i detta tillfälle fortfarande på m, men värdet på m har ändrats 			till 8.
	Question 6
		Storleken på c borde vara samma som p vid AM9, då den pekar på c[0]. Då har 			pekaren p storleken 32 bitar, vilket storleken på c också borde vara.
	Question 7
		Den behöver ha alla 3 bokstäver men även en null byte som visar att stringen 			är slut
	Question 8
		Den använder little-endian, då CD är de första som står och 12 är det sista 			som står
	Question 9 
		I funktionen fun är det pass-by-value, vilket betyder att när den 			inkrementeras internt påverkas inte m. När den sparar det inkrementerade 			värdet i gv skrivs det värdet dock om, då gv är global.		
		
